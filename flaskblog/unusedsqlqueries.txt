#cur = mysql.connection.cursor()
    #query = """SELECT Date, Amount 
     #    FROM growthkpi
      #   WHERE category = 'Total C-Store Margin ($)'
       #  and store = %s
       #  AND date BETWEEN '2019-01-1' and (SELECT max(Date) FROM growthkpi) 
       #  """ % (chartstore)
    #cur.execute(query)
    #rv = cur.fetchall()


    #def run(stmnt):
 #   rs = stmnt.execute()
  #  for row in rs:
   #     print(row)


#with engine.connect() as con:
 #   rs=con.execute('select * from growthkpi')
  #  for row in rs:
   #     print (row)


cur2 = mysql.connection.cursor()
    query2 = """SELECT Date, Amount
         FROM growthkpi
         WHERE category = 'Total Fuel Volume'
         and store = %s
         AND date BETWEEN '2019-01-1' and (SELECT max(Date) FROM growthkpi) 
    
         """ % (chartstore)
    cur2.execute(query2)
    rv2 = cur2.fetchall()

    cur3 = mysql.connection.cursor()
    query3 = """SELECT Date, Amount
         FROM growthkpi
         WHERE category = 'Total Fuel Volume'
         and store = %s
         AND date BETWEEN '2018-01-1' and (SELECT max(Date) FROM growthkpi) 
    
         """ % (chartstore)


  cur3.execute(query3)
    rv3 = cur3.fetchall()




// $(document).ready(function(){
    $.ajax({
      url: "http://127.0.0.1:5000/cstoresales",
      method: "GET",
      success: function(newdata) {
         var datenew = [];
         var marginnew = [];
         
         for (var i in newdata) {
           datenew.push(newdata[i].date);
           marginnew.push(newdata[i].margin);
         }  
      console.log(newdata);
      console.log(datenew);
      console.log(marginnew);
      }
  
  


      
  });
//});


 <!-- 

                {% if form.mobilephone.errors %}
                    <ul class="errors">
                        {% for error in form.mobilephone.errors %}
                            <li>{{ error }}</li>
                        {% endfor %}
                    </ul>
                {% endif %}
         -->




         

#@app.route("/addupdatedgsa", methods = ['GET', 'POST'])
#def addupdatedgsa():
    
    
 #   form= EmployeeForm()
  #  print("post")
  #  print(form.store.data)
    #print(form.id.data)
    #if form.validate_on_submit():
    #emp = Employee(firstname=form.firstname.data,
     #                       nickname=form.nickname.data,
     #                       store=form.store.data,
     #                       addressone=form.addressone.data,
     #                       addresstwo=form.addresstwo.data,
     #                       apt=form.apt.data,
     #                       city=form.city.data,
     #                       province=form.province.data,
     #                       country=form.country.data,
     #                       email=form.email.data,
     #                       mobilephone=form.mobilephone.data,
     #                       SIN=form.SIN.data,
     #                       Startdate=form.Startdate.data,
     #                       Enddate=form.Enddate.data,
     #                       lastname=form.lastname.data)
    #form.populate_obj
    #db.session.add(emp)
    #db.session.commit()

    #flash('Employee has been update', 'success')

    #return redirect(url_for('hr'))
    
    #return render_template('employeeupdate.html', form=form)






    def validate_email(self, email):
        emp = Employee.query.filter_by(email=email.data).first()
        if emp:
            raise ValidationError('That email is Taken')

    def validate_SIN(self, SIN):
        user = Employee.query.filter_by(SIN=SIN.data).first()
        if user:
            raise ValidationError('That SIN is Taken')

    def validate_store(self, store):

        if store.data == "Home Store":
            print("homestore")
            raise ValidationError('Please Enter a Store')



#gsaoriginalphone = Employee.query(*[c for c in Employee if c.id != 'staff_id']).all
    #two = Employee.query.get( 1)
    
    #two = Employee.query.get(Employee.id)
    #.except_(id != staff_id).all()
    #two = Employee.query.filter(Employee.mobilephone).except(Employee.id != staff_id)
    #two = select([Employee.mobilephone]).where(Employee.id != staff_id)
    #two = Employee.query.filter(Employee.mobilephone).except(Employee.id != staff_id)
    #print (two.firstname, two.SIN)
    #for row in two:
      #  print(row)
    
    #if two:
        #print("dummy")
    #tester = oner.filter_by(oner.mobilephone).all() 
    #print(tester)




    def validate_mobilephone(self, mobilephone):
        emp = Employee.query.filter_by(mobilephone=mobilephone.data).first()
        #empold = Employee.query.get({gsa.id})
        if emp:
            raise ValidationError('That mobile is the same.')
        
    def validate_email(self, email):
        emp = Employee.query.filter_by(email=email.data).first()
        if emp:
            raise ValidationError('That email is Taken')

    def validate_SIN(self, SIN):
        user = Employee.query.filter_by(SIN=SIN.data).first()
        if user:
            raise ValidationError('That SIN is Taken')



 {%if messages%}
                        {% for category, message in messages %}
                          <div class="alert alert-{{ category}}">
                            {{ message }}




  display: grid;
  position: center;
  padding-top: 30px;
  padding-bottom: 50px;
  margin-right: 20px;
  margin-left: 20px;
  height: 100%;
  box-shadow: 5px 5px lightgray;
  border-radius: 15px;



  @app.route("/updategsa/updategsa2", methods=['GET', 'POST'])
def updategsa2():

    #gsa = Employee.query.get(staff_id)
    
    form = EmployeeUpdateForm()
    #print(gsa.SIN)
    print(form.SIN.data)
    if form.validate_on_submit():
        print("success")


    return render_template('employeeupdate.html', form=form)




    #if gsaphone == phone:
     #  print("same mobile")  
    #else:
    if emp:
        flash ("mobile already used")
        return render_template('employeeupdate.html', form=form, gsa=gsa)
        
    #if gsasin == sin:
     #   print("same sin")
    #else:
    if sincheck:
        flash("sin already used")
        return render_template('employeeupdate.html', form=form, gsa=gsa)
    #if gsa.email == form.email.data:
     #   print("same email")
    #else:
    if emailcheck:
        flash("email already used")
        return render_template('employeeupdate.html', form=form, gsa=gsa)
    